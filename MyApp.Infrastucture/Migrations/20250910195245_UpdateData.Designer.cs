// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastucture.Data;

#nullable disable

namespace MyApp.Infrastucture.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    [Migration("20250910195245_UpdateData")]
    partial class UpdateData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EndUser");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Adress = "42758 Casper Forges",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Adress = "34373 Reyes Islands",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Adress = "5926 Schroeder Terrace",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Adress = "87835 Bauch Radial",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Adress = "90710 Jordy Square",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Partner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cf6d5dc-e427-4c32-b2b4-d1d130a88084",
                            Email = "admin@myapp.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MYAPP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF8c3DAmLzTLoFg9A1goyLyVzFRGVKTxBy7ZyyqnqWBrQFd1/ZED68eOpaYAErUKPQ==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81798fef-9569-4b18-93b3-e2f1dad111c9",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70f44db2-8bb3-4c5f-b262-fce5ddf2ddb4",
                            Email = "QuangNinh38@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Phan Kim Đan",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUANGNINH38@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENP4ttfhWG05v+KoGBNdoDRtgWC6CDuwLxjBJcRed0R7dPBYePnb1zSt7TuvZXRX5g==",
                            PhoneNumber = "026 9165 3839",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fd44595-1e1a-40f6-8b4c-cf0eb04f3614",
                            TwoFactorEnabled = false,
                            UserName = "QuangNinh38@hotmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8874f86-99ad-4bf2-9140-f61efaa96cd0",
                            Email = "LanThuong.Ngo57@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đinh Hải Ngân",
                            LockoutEnabled = false,
                            NormalizedEmail = "LANTHUONG.NGO57@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELHtGQM1NGRRsmKGAESuxbuui8iQasn7FeHEqj6ANDW5NunwciJT/fnRTv0kF4984g==",
                            PhoneNumber = "0219 0280 6460",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3b29d1d-6474-4ba2-b3e6-362c1aded004",
                            TwoFactorEnabled = false,
                            UserName = "LanThuong.Ngo57@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "614332b6-daf6-42d1-9914-2bf5058566aa",
                            Email = "MinhPhuong.Dang0@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Vương Mộng Quỳnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "MINHPHUONG.DANG0@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7EL6HlM+WobQ8H8uzZy6AIFZqCwaILJi/qIFxwuM7H6NX1FBDoaUcsiA6u5vvfWA==",
                            PhoneNumber = "028 9207 7539",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d58f1b31-3ee8-4a62-b93b-a9f7f0a39e6a",
                            TwoFactorEnabled = false,
                            UserName = "MinhPhuong.Dang0@hotmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6accfb63-34d7-48fb-acde-a0d47307b273",
                            Email = "LeQuyen_Hoang3@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Trọng Nghĩa",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEQUYEN_HOANG3@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPeTNkAHE6xlMZfJfMnbOBsa5aREckMM5kGONBq63L6LD76SR5dQjqFaDYHGG2NXGA==",
                            PhoneNumber = "0235 3497 1579",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51bea0aa-cc7e-4535-b34c-898c58955d7f",
                            TwoFactorEnabled = false,
                            UserName = "LeQuyen_Hoang3@yahoo.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cc812d6-8be8-44d9-84e5-3b5229cd8891",
                            Email = "HoaLac.Phan@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Lý Diệu Ngà",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOALAC.PHAN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFF2Uvtlfb3JHByz8W4tguLBvyGWh3Im7o8rTYlAQKdLMrtlNAYtLS005kQPqqRnjw==",
                            PhoneNumber = "0244 1253 5286",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "318cf5fd-2a44-4ad0-9677-1f9146e3d52d",
                            TwoFactorEnabled = false,
                            UserName = "HoaLac.Phan@hotmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebbc948b-e285-4c82-9a33-717215e0874b",
                            Email = "BaoLong.To@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Phan Hải Sơn",
                            LockoutEnabled = false,
                            NormalizedEmail = "BAOLONG.TO@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHOwYpNY8ZALCwikG73kNYWYflYnQB1/ZQtEzmX9O2wyV0blqHavsOo6QcZ79kXGFw==",
                            PhoneNumber = "0259 2902 7769",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c717233-9681-4508-8c9b-3aec87fd9d88",
                            TwoFactorEnabled = false,
                            UserName = "BaoLong.To@yahoo.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2144327e-a8fa-4c99-b2d7-be34e7726887",
                            Email = "QuangThai_Pham@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Trương Mộng Liễu",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUANGTHAI_PHAM@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1G6tH9sZz5vl2DfoAIF18bIUNJwhJUPAlOt/AnKDGvjst2h3N6cGFuGbrIawgnyw==",
                            PhoneNumber = "029 5365 4703",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d641bab-8c35-42b5-a45a-225c0bb00bd4",
                            TwoFactorEnabled = false,
                            UserName = "QuangThai_Pham@hotmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26dfcdb4-6997-433d-9ac4-e14f4fd39cc3",
                            Email = "NghiDung_Hoang11@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Trương Hữu Tường",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGHIDUNG_HOANG11@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIB8rYmKqj8nhDvv7Mf/UQQggUzul+jxXjJSoXvbQYSWswbIDrXyWA793s5Kog782Q==",
                            PhoneNumber = "0287 9221 3153",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e66ef7c-9c49-4ce7-a095-897edfe9b779",
                            TwoFactorEnabled = false,
                            UserName = "NghiDung_Hoang11@hotmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ade69bd6-e6b7-488b-ba62-66b125a54085",
                            Email = "TuanDung.Doan@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Hoàng Hồng Phát",
                            LockoutEnabled = false,
                            NormalizedEmail = "TUANDUNG.DOAN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsaujgLw9pbeCAE/cuf0CL3NJoogXu1jiZtGVyL/wH1kGT3R6Mbc8lDLUu6G5cc0g==",
                            PhoneNumber = "029 0544 0023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf99443f-ae3d-4221-aeb5-a60b9d15ee58",
                            TwoFactorEnabled = false,
                            UserName = "TuanDung.Doan@hotmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b698e47-2c7d-4767-a386-773f51b74e06",
                            Email = "MyKieu60@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Lý Thiện Lương",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYKIEU60@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP46WuMeKD5Uk0s/vV5U9CMcgwwmHFtqnwo4sEetcc3S6zjp+4el7YU164gukaPAMQ==",
                            PhoneNumber = "020 3659 2548",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "689d1cbf-282e-43dd-9be2-48e34ae70fb2",
                            TwoFactorEnabled = false,
                            UserName = "MyKieu60@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
