// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastucture.Data;

#nullable disable

namespace MyApp.Infrastucture.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    [Migration("20250910093859_SeedRandom")]
    partial class SeedRandom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EndUser");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "(897) 944-1478 x7331",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "(824) 519-7112 x18210",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "567.280.2973",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "1-338-740-7061 x54884",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "502.378.7909",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Partner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbc55759-58b0-47a6-a3a5-8ccb42198b77",
                            Email = "admin@myapp.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MYAPP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkefW0d2Q+u88zNnfwVk8XJK8r3UxstHuiKJZfWV7aEl30sveqPrG4IXdH0yGgegQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bac8f18-8c80-4cea-aed5-94101b858d50",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7566b090-78d3-43e7-abdc-0b7c12c6bf83",
                            Email = "TichThien_Phan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TICHTHIEN_PHAN@GMAIL.COM",
                            NormalizedUserName = "TUANDUC.LAM70",
                            PasswordHash = "AQAAAAIAAYagAAAAEIR7zKyNa9wW9ePe93q9Nwgbh6/T6KR8GeAPUH7SbA5L93eAa45m33/JCqtwXw2N+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cd89b95-5a0a-4bd2-a5e7-6a90d25ee719",
                            TwoFactorEnabled = false,
                            UserName = "TuanDuc.Lam70"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea8b6310-5c1c-440b-8840-39e7576b321f",
                            Email = "TuongAnh_Tang@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TUONGANH_TANG@YAHOO.COM",
                            NormalizedUserName = "MYTRANG38",
                            PasswordHash = "AQAAAAIAAYagAAAAEI9x9kc2dJi+4Enuku7Wl2Yi0LxqDRDkayJ5e7EbbuY6n6EcNxE/8KJya1aiO6ugIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "727ae5d8-30b8-4c36-9993-718f93434f37",
                            TwoFactorEnabled = false,
                            UserName = "MyTrang38"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b108a5d-be8e-48d2-ad13-ddc19cfc1046",
                            Email = "XuanNhien74@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "XUANNHIEN74@GMAIL.COM",
                            NormalizedUserName = "BAOSON_LE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGBLKglSMySaZVH+GVVXJNb+U4tc7br+12fWLAECCsANstVse4YjB51BBZ9Mh578mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf352a96-d961-4c92-8ab9-14fc94a9e90a",
                            TwoFactorEnabled = false,
                            UserName = "BaoSon_Le"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1f9dbff-512e-43dc-8b8c-f7ae71a676d7",
                            Email = "MaiLinh74@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAILINH74@YAHOO.COM",
                            NormalizedUserName = "BICHLIEN23",
                            PasswordHash = "AQAAAAIAAYagAAAAELwTqcFsHsvWQY1uR36irSVQi9uBDAi//s6skvpQi83MRlYHjgWxXbq5T6asI+t3lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca6b6420-219e-4496-83e4-514e3bd53678",
                            TwoFactorEnabled = false,
                            UserName = "BichLien23"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "393d58aa-2ff3-463f-abd5-7667580895ed",
                            Email = "TrangNha_Do@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANGNHA_DO@YAHOO.COM",
                            NormalizedUserName = "KHIETLINH87",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxhg/LAeO7KInaMGSNkllt4fYpl9QiicnlshD53oOKWO0kjXy1ioH7Cbw+lsRS+tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c304075-2c7c-4793-8c22-16954a83549f",
                            TwoFactorEnabled = false,
                            UserName = "KhietLinh87"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "533f9dc0-5783-48f7-a255-2dda1a7b7403",
                            Email = "ThuHa.Lam55@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THUHA.LAM55@HOTMAIL.COM",
                            NormalizedUserName = "NHATNAM.TO",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5Oy+yqH/go0wALBfMCQY9hROlIHQa6A5Cstd7SZ4rPD5VoXCCbwUYs83w2Tagbrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ced8b322-7843-4473-a843-8d54b34c4917",
                            TwoFactorEnabled = false,
                            UserName = "NhatNam.To"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d97a7139-5c24-4a6d-bfec-cba5d4924a0d",
                            Email = "HuyenThu_Vuong81@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYENTHU_VUONG81@HOTMAIL.COM",
                            NormalizedUserName = "DUYTAM_NGUYEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG64/k33Oja0OGN2Of/ag8jzOfEtljlGpGQTcb7jztUijSgXQ1/5pmllVhKK7T4G6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d3bb072-f04c-41ed-9d45-131f2d8294eb",
                            TwoFactorEnabled = false,
                            UserName = "DuyTam_Nguyen"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffdcec70-9c28-4f08-9383-ac9375d7d07e",
                            Email = "DiemLoc42@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIEMLOC42@GMAIL.COM",
                            NormalizedUserName = "LETHU51",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpXrvJZXLeS3TFeWx1UZqzqIJkdMXLmffS4z/3hUf6KM6+AJEkA+jxEhVrjurLJMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "698e6d7f-d9fe-445d-a7ab-90214465579b",
                            TwoFactorEnabled = false,
                            UserName = "LeThu51"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b99667e4-9a82-46a3-adc5-f1f7e25f4338",
                            Email = "ThuyVan70@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THUYVAN70@HOTMAIL.COM",
                            NormalizedUserName = "HANHNHON11",
                            PasswordHash = "AQAAAAIAAYagAAAAEKamW2A8OZloe5pNKzwb5w5wEb7sIKG0zWWBrqygJQH8JdwoQyehJX/0BnGbM7kLXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a6c664d-3325-4b80-98b3-ff082be3837c",
                            TwoFactorEnabled = false,
                            UserName = "HanhNhon11"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3070e4da-8367-4eb2-9ec1-6173e4c1e244",
                            Email = "UyenPhuong54@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "UYENPHUONG54@HOTMAIL.COM",
                            NormalizedUserName = "HOAIBAC.HA69",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHn/QLWeIhe2UqnBuxZUQZGXP/qk1FEXkMEeNDOCMTUK8T5WxUc6NEYqgvDDTP3og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bbed01b-61c5-4c77-b0df-ca6d184e16cf",
                            TwoFactorEnabled = false,
                            UserName = "HoaiBac.Ha69"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
