// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastucture.Data;

#nullable disable

namespace MyApp.Infrastucture.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    [Migration("20250910120057_UpdatePhone")]
    partial class UpdatePhone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EndUser");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "(861) 921-1194 x25660",
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "719-774-5208 x610",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "987-289-0858 x08331",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "586.927.1724",
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Phone = "339.573.9365 x8754",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Partner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da5807e6-a01f-4e4f-8643-541c3cedf5ef",
                            Email = "admin@myapp.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MYAPP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELj03SemH0WSPzS01hKjmCLoiBjdvex0hk/tIyKhf56wBhQ4QgERKO11Xsm6+uhjfg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30caf1ee-d7cb-4c3c-b883-66d60a515338",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7d07c50-4179-4b1a-9154-682acb5ddf11",
                            Email = "ThuyDu.Dao@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THUYDU.DAO@HOTMAIL.COM",
                            NormalizedUserName = "KHACVU.NGO18",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDFSw6OyMxdO1hM1IWNRyrnzEmQYaVzMdvoyYoUOunQaIN0ndMcdmy0Xs+xINX79Q==",
                            PhoneNumber = "020 6293 4489",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acdafdc9-1ab3-4350-97b5-8bbbdb5c41a7",
                            TwoFactorEnabled = false,
                            UserName = "KhacVu.Ngo18"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97ac3290-cf43-4152-8a6f-ddff9bbd4658",
                            Email = "NguyetCam69@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYETCAM69@GMAIL.COM",
                            NormalizedUserName = "PHINHAN_TANG22",
                            PasswordHash = "AQAAAAIAAYagAAAAENTvAk09e3k0TTS8La0l/KdthZDQN2lakPel5fCq/OLSODP1ZZN62NnZDd0iGccCwg==",
                            PhoneNumber = "022 8249 4388",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e94ce5b0-faf8-4d0f-929a-d8eb65a9561b",
                            TwoFactorEnabled = false,
                            UserName = "PhiNhan_Tang22"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "678fe8a1-13bc-4daa-8e0c-2a30de70d6e2",
                            Email = "DieuHuyen.Dao24@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIEUHUYEN.DAO24@GMAIL.COM",
                            NormalizedUserName = "HOANGVIET.TRUONG97",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7OgGE1fHnjyXU2I6KGNoow3G8Z3HVCXPsbBKw/PF0diGUWfUc4X2Plsc4bArp18Q==",
                            PhoneNumber = "0215 9604 1945",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4759e2a2-db35-4eb4-b845-6759c40efdd3",
                            TwoFactorEnabled = false,
                            UserName = "HoangViet.Truong97"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9163d07c-b243-49f3-98b8-5ade4df27907",
                            Email = "BaoThuy.Ha@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BAOTHUY.HA@YAHOO.COM",
                            NormalizedUserName = "THANHY_TANG66",
                            PasswordHash = "AQAAAAIAAYagAAAAEKP1vdF8+bOxYiTz4dd6VbI+7wR4gclrCrbL1RB1nG3UKdaEaggh1ZyQp1mziAjCBg==",
                            PhoneNumber = "023 1001 3582",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46b9ab23-064a-4290-802c-089d70f4fb87",
                            TwoFactorEnabled = false,
                            UserName = "ThanhY_Tang66"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8d05af5-8b18-45b2-acdf-f002c45836a9",
                            Email = "DucMinh_Mai96@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUCMINH_MAI96@HOTMAIL.COM",
                            NormalizedUserName = "DONGDUONG.DANG",
                            PasswordHash = "AQAAAAIAAYagAAAAEHssh4Y31Ytrd6aM5ZwuehU+Ywz2VyBgqG5vLrx++uDNe4jmpXQbry/FpXPHtenSOw==",
                            PhoneNumber = "0218 8368 4328",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aa8f662-722f-48ee-8d7f-2a0c16f1a167",
                            TwoFactorEnabled = false,
                            UserName = "DongDuong.Dang"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1e6a33e-055e-4bbb-8a70-2ab323a4c434",
                            Email = "NgocAn65@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NGOCAN65@GMAIL.COM",
                            NormalizedUserName = "QUANGDUC.HO",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnXoOWHW8JPv3zy29Imo98hgkfqDOFNvh/iKRBbfrWcKv/5Sq2ahF3dmYGX51Rgyw==",
                            PhoneNumber = "022 8660 8694",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6eb249f-aa87-4807-b98a-a225cd1526c8",
                            TwoFactorEnabled = false,
                            UserName = "QuangDuc.Ho"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a3d3f43-2290-4f93-9a2c-49001db7ff44",
                            Email = "PhungViet.Le@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGVIET.LE@HOTMAIL.COM",
                            NormalizedUserName = "NGUYENLOC76",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXCRHjGjP18mHXtOH3uQax4nFGY3DpqGWfKZNp04aOKL3Ajilz9Qx46IuhW9boTnw==",
                            PhoneNumber = "0264 4366 0342",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec4a3a66-1fde-4d7a-ac6d-d69d640942ca",
                            TwoFactorEnabled = false,
                            UserName = "NguyenLoc76"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72eb2c37-efcb-4588-9e07-d52c5e7389fd",
                            Email = "NhaKhanh_Le59@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NHAKHANH_LE59@YAHOO.COM",
                            NormalizedUserName = "TUYETHONG_VUONG",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6sFHaGXpQPOoksKIBbVsEc1Ne5jFt59FymU0K3fktSAZAHsCY6onZw6HssGY0Www==",
                            PhoneNumber = "029 1782 1177",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9c04595-0f07-47b7-bed2-47d4673009a3",
                            TwoFactorEnabled = false,
                            UserName = "TuyetHong_Vuong"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94aa9b20-dc5a-4bfa-9553-e4fb76ebe06b",
                            Email = "ThanhNguyen_Tang94@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHNGUYEN_TANG94@YAHOO.COM",
                            NormalizedUserName = "BACHVAN36",
                            PasswordHash = "AQAAAAIAAYagAAAAEMvU4V912CddEdjTabdri3WTXdvTSqAEgTmuJYpLc/ml+/NMznM5PFDZszQFPyArKw==",
                            PhoneNumber = "028 5808 5080",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b8406a7-017f-4502-90d7-145dbd4c869d",
                            TwoFactorEnabled = false,
                            UserName = "BachVan36"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43915f7d-0a19-43e3-9030-cb19e0576ad3",
                            Email = "MinhKhue_Do58@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MINHKHUE_DO58@GMAIL.COM",
                            NormalizedUserName = "NHATPHUONG36",
                            PasswordHash = "AQAAAAIAAYagAAAAELnQL4DqnRYK7sljnAMmU7qd5xAJRue5F3ULjD/xZNuR3OhgXbE7XiaZ4nCmEJJyvw==",
                            PhoneNumber = "021 6413 8742",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "361714d6-74e7-4ec0-8542-cc8547a8b1b9",
                            TwoFactorEnabled = false,
                            UserName = "NhatPhuong36"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
