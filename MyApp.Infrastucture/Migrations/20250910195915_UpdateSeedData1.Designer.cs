// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastucture.Data;

#nullable disable

namespace MyApp.Infrastucture.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    [Migration("20250910195915_UpdateSeedData1")]
    partial class UpdateSeedData1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EndUser");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Adress = "6137 Terry Roads",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Adress = "3159 Okuneva Center",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Adress = "82861 Marisa Forks",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Adress = "9472 Zemlak Corners",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Adress = "12315 Mathew Shore",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Partner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94e9a03a-a799-49c0-80ba-479bf757f801",
                            Email = "admin@myapp.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MYAPP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOR90bP3IMZuJkhRpFdSEdPf0lM8hcOGc8bP+89XMyWkMNO2i2+43+jAEQunWo8/pg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a73bf126-11cc-4b41-9a6e-b0a865c6d4f5",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7831bc4c-08a9-420d-ae31-9994f5b8e287",
                            Email = "PhuongChi53@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Bích San",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUONGCHI53@GMAIL.COM",
                            NormalizedUserName = "PHUONGCHI53@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPABKew4A/tw1pmWWLvPesGz0TbyYXGoPqw3kdStiYgd/BQrUFFkfM5dNpRzGA83TQ==",
                            PhoneNumber = "0286 1464 7988",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3638ef2f-cfd9-4406-b8bd-37efe74d21c0",
                            TwoFactorEnabled = false,
                            UserName = "PhuongChi53@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edda715c-8cab-4c56-96eb-6949497d1d14",
                            Email = "HuyenAnh_Ly@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Phan Ðông Vy",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYENANH_LY@YAHOO.COM",
                            NormalizedUserName = "HUYENANH_LY@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECwxdfc23l35DQsfYlpFtWBxwaPp22D5kkf7rKE3BNxibub1O0CKgkY/skfuThfLdQ==",
                            PhoneNumber = "0240 4318 6497",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81d8d5bf-652f-4a0f-a701-e53bb474deea",
                            TwoFactorEnabled = false,
                            UserName = "HuyenAnh_Ly@yahoo.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "888dcd5c-a9f3-4769-a984-accf2053157c",
                            Email = "DinhHuong1@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Lê Quốc Trường",
                            LockoutEnabled = false,
                            NormalizedEmail = "DINHHUONG1@HOTMAIL.COM",
                            NormalizedUserName = "DINHHUONG1@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELnbgfYbgUWIA6uYd44PZTpThe7hkZVvAwgBGf+SLgiIHcVymklavOlGLhecdd2//Q==",
                            PhoneNumber = "025 8919 8135",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6450cb4c-75d6-4ce9-82e8-295b87e4b134",
                            TwoFactorEnabled = false,
                            UserName = "DinhHuong1@hotmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a00df942-3249-443a-a3bf-64ec486e1445",
                            Email = "HuuKhang_Vu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trương Tiến Dũng",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUUKHANG_VU@GMAIL.COM",
                            NormalizedUserName = "HUUKHANG_VU@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELnDbGbiYJIEQBW0X0ziXayu1huqXcXjoZjtGIKh3hX2TQNwN17NAVp/dlVPkH+m3w==",
                            PhoneNumber = "0274 4742 3810",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6adb77d-3fd8-4c03-9188-f6a297e1842e",
                            TwoFactorEnabled = false,
                            UserName = "HuuKhang_Vu@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee322fe0-9f17-4a76-87e2-4f718a9b9a6c",
                            Email = "NhatDa.Trinh36@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Hồ Kiều Mai",
                            LockoutEnabled = false,
                            NormalizedEmail = "NHATDA.TRINH36@YAHOO.COM",
                            NormalizedUserName = "NHATDA.TRINH36@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELrIK3Ak5iY8gqdqqUe6tROkWplmwO9jyeyv9c0zujazJmERxmMkat8NvXGdI5HJWg==",
                            PhoneNumber = "0282 5168 1653",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40d86b3a-77d7-49f1-96be-67dae516a300",
                            TwoFactorEnabled = false,
                            UserName = "NhatDa.Trinh36@yahoo.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88f91a43-f685-4eae-a712-9c55e14825fe",
                            Email = "XuanNhien_Ly30@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Mai Đan Thư",
                            LockoutEnabled = false,
                            NormalizedEmail = "XUANNHIEN_LY30@GMAIL.COM",
                            NormalizedUserName = "XUANNHIEN_LY30@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJ1tYzaxdTfQBCmZCC0U4CYPoBL2xMqe6AXUK8r7o1aJ8AXcBt02MWCJcE3j/UZ+A==",
                            PhoneNumber = "0273 7065 8818",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4080f37-7dd6-403b-954c-88b69d85a840",
                            TwoFactorEnabled = false,
                            UserName = "XuanNhien_Ly30@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0346be65-da88-4a4c-abad-fc07e9eec8f3",
                            Email = "KhanhChi_Ha29@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Dương Hữu Vượng",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHANHCHI_HA29@YAHOO.COM",
                            NormalizedUserName = "KHANHCHI_HA29@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFIQAD7Bv9ARxc7BajXNsj2oR/pJmxZ5yt/ji7mNoHHItkbvMlg0+3TH4Dxpo0A13g==",
                            PhoneNumber = "023 6374 5685",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbf25849-28fa-4f06-bc5f-dee674f93f90",
                            TwoFactorEnabled = false,
                            UserName = "KhanhChi_Ha29@yahoo.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26e5326a-cb00-4dd6-8f96-06c3cb9b6393",
                            Email = "QuocViet.Do@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Dương Thiên Lương",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUOCVIET.DO@YAHOO.COM",
                            NormalizedUserName = "QUOCVIET.DO@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGs4KvQejAkjfZuYKCHcEWh5XKdBlbzskEObVbBhlbZ/6HN+CuiRpPTUAvL3LaMLg==",
                            PhoneNumber = "024 2266 5333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddbfc23b-4a7b-4d39-91cd-6cc26f044733",
                            TwoFactorEnabled = false,
                            UserName = "QuocViet.Do@yahoo.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4711e7e-9364-412e-849d-f50ac3e34b54",
                            Email = "TheDung.Dinh65@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Đỗ Hữu Thiện",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEDUNG.DINH65@YAHOO.COM",
                            NormalizedUserName = "THEDUNG.DINH65@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELpaky6ys+0H+A/dtRz/ye9+Y0HCgL7hqO776d+D7WLUOm6V3z8QXgRB0KhZs7Ti1A==",
                            PhoneNumber = "025 1641 0774",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6399115d-3d94-4ef2-b9e5-c4764beead2e",
                            TwoFactorEnabled = false,
                            UserName = "TheDung.Dinh65@yahoo.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25f264fc-6155-4ffe-8e25-6ce966f13b89",
                            Email = "HiepHa9@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Trương Gia Khánh",
                            LockoutEnabled = false,
                            NormalizedEmail = "HIEPHA9@YAHOO.COM",
                            NormalizedUserName = "HIEPHA9@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAW46z38dBTxBlz6mF52W2DYRoNGs4clC5XiV8BhSctt04RYPtxoS7suHVfnRqwNgA==",
                            PhoneNumber = "0251 8172 4122",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acda77ff-3d1f-46bd-ae6f-2533d71cd212",
                            TwoFactorEnabled = false,
                            UserName = "HiepHa9@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
