// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastucture.Data;

#nullable disable

namespace MyApp.Infrastucture.Migrations
{
    [DbContext(typeof(MyAppDbContext))]
    [Migration("20250910194921_UpdateSeedData")]
    partial class UpdateSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EndUser");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Adress = "0548 Elaina Common",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            Adress = "83495 Hayes Circles",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            Adress = "17210 Purdy Courts",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            Adress = "7002 Ondricka Points",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 10
                        },
                        new
                        {
                            Id = 10,
                            Adress = "25606 Cartwright Springs",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 11
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Partner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            About = "Thông tin partner",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("MyApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "069cf0cd-d219-45d8-a15b-56f4c3165b61",
                            Email = "admin@myapp.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MYAPP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC/fPYAxhFI/8dlV7KEUFjCv0NwAdOnwCjU958nY2cSzK4lIBzJdYf/mWuWpbDsKHA==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d0d5243-9290-4ffa-89d1-17fbf766fd44",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "062f7399-47e4-4990-8afd-090da5c41910",
                            Email = "KimQuyen_Truong53@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Niệm Nhiên",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIMQUYEN_TRUONG53@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELOC1lE1R8m1lS+IOLHyB5wHoX6pWSj+lkqr1YyIjekOHvapZAZtMM+Q4XUt3xIT2g==",
                            PhoneNumber = "021 6966 3700",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "944eed4e-457d-4633-abea-0e83910374bc",
                            TwoFactorEnabled = false,
                            UserName = "KimQuyen_Truong53@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24be8df8-1bd9-4d66-8a64-661740e5f62a",
                            Email = "TienGiang.Hoang51@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Lê Vân Thúy",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIENGIANG.HOANG51@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJYIcGaauI4EAUSGL/1k/gMd/G/uBG/nxdbfTaEE/fh+Lqw6ys33t0Mbw0GjiJGgmA==",
                            PhoneNumber = "024 5674 5764",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "119453cd-784f-4e4b-a827-66b6a962f950",
                            TwoFactorEnabled = false,
                            UserName = "TienGiang.Hoang51@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02abaad3-8435-41a7-822c-85e3ddf7f971",
                            Email = "QuocHung_Nguyen73@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Trương Hữu Phước",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUOCHUNG_NGUYEN73@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdDOriPBsF34N+qyfCxJVRRR+eLxOcVIFr61UZRD78gBLYY/aeuST+P7u9vcdaH0g==",
                            PhoneNumber = "020 6726 7725",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "059fe5d5-03dc-4027-a0bd-3bc218432ba1",
                            TwoFactorEnabled = false,
                            UserName = "QuocHung_Nguyen73@yahoo.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "714700b8-4b52-4d31-93df-d14fa0abedbc",
                            Email = "ThienLuong.Doan65@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Đặng Hải Hà",
                            LockoutEnabled = false,
                            NormalizedEmail = "THIENLUONG.DOAN65@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELsBlvTuhsIyqeJDonfKwA8aGE37e5WKZPq9WXNOAixNRW8tQcHw62PJLzSrZ0HO5w==",
                            PhoneNumber = "0222 5732 9881",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cdccf76-1146-40bf-aeb1-bb9339fb369f",
                            TwoFactorEnabled = false,
                            UserName = "ThienLuong.Doan65@yahoo.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb634c9d-5442-4990-b51d-7b2802e0eb05",
                            Email = "DinhSang.Lam35@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Lý Thành Lợi",
                            LockoutEnabled = false,
                            NormalizedEmail = "DINHSANG.LAM35@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGBKooPlhfI9KlG3v6YNMu/mCC1LhMca3ExAlWnB5M/XHnnyPcWaahtfOCT7cUYhqQ==",
                            PhoneNumber = "023 7507 6667",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1a0c40e-2b50-4587-85eb-f0827d7530cc",
                            TwoFactorEnabled = false,
                            UserName = "DinhSang.Lam35@hotmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e063d76-bf4b-41fa-928b-3915690c1685",
                            Email = "ChiCong.Ho91@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Vương Thái Tân",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHICONG.HO91@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIj+Syb/js1t5Ew3Kc45SnTNfRKoK29W/2lrpxWjn4W1r/YpJMq+Rx152XVzEBnlA==",
                            PhoneNumber = "0297 1011 5139",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "772e553a-f29a-4498-956a-ba0a08a5420e",
                            TwoFactorEnabled = false,
                            UserName = "ChiCong.Ho91@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51bb973d-b69d-49ca-954c-3958f2c2aa40",
                            Email = "BichTrang68@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Hồ Trường Long",
                            LockoutEnabled = false,
                            NormalizedEmail = "BICHTRANG68@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEACi1eSglPJGlU7gm/HaauGU0cX7G46KuNbjDiWT0TQdYoFfDEcV7CycsaqaICdK4A==",
                            PhoneNumber = "022 7381 9209",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09dc2e97-693a-459d-b49f-e8d798b430fe",
                            TwoFactorEnabled = false,
                            UserName = "BichTrang68@yahoo.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f6d38ec-c6ac-4757-8a42-434fa2764d9c",
                            Email = "TheLam.Do19@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đoàn Ngọc Cầm",
                            LockoutEnabled = false,
                            NormalizedEmail = "THELAM.DO19@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5dvx35v5eQW0CQ/L96wRDOnPYcbRIIpfFQhT/ennnktbF1oyjPYSe2ZDRPskNGNQ==",
                            PhoneNumber = "028 1231 8202",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "575adf29-764a-4bc8-9436-7c414ccc67a0",
                            TwoFactorEnabled = false,
                            UserName = "TheLam.Do19@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f105a81a-59bf-478e-bbb0-3743caab77a1",
                            Email = "KhacVu.Dang@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Tô Thăng Long",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHACVU.DANG@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaDYm8ZzxXLBXCuOYoTQTrMCFzvL1WT/b7+e+NEmK3/mBlKvDf1ACsb8wE8Bm2SUA==",
                            PhoneNumber = "0268 9399 7354",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76e24841-3968-4f40-8fe7-b0161a2d5c79",
                            TwoFactorEnabled = false,
                            UserName = "KhacVu.Dang@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f1ed94a-42bb-4374-b95f-b0bd8ebe8e29",
                            Email = "GiaNhi.Bui39@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Bùi Bạch Trà",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIANHI.BUI39@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVgWyYyMXWEy5Y4r9co/jmpmmlw7vJagRpyRPLt66NkjTHNsZag9mOXbjkpAhLneA==",
                            PhoneNumber = "0204 7104 3652",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54599efe-6244-457d-a387-ec526ecb3ea1",
                            TwoFactorEnabled = false,
                            UserName = "GiaNhi.Bui39@hotmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Domain.Entities.EndUser", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Partner", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
